name: Build and Deploy Eleventy Site

on:
  push:
    branches: [main, master]

permissions:
  contents: read
  pages: write
  id-token: write
  actions: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Eleventy site
        run: npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Clean up old workflow runs and artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const currentRunId = context.runId;

            console.log('Starting cleanup of old workflow runs and artifacts...');

            // 1. Clean up old workflow runs (keep only the last 1 run)
            try {
              const workflowRuns = await github.rest.actions.listWorkflowRunsForRepo({
                owner,
                repo,
                per_page: 100,
                status: 'completed'
              });
              
              const completedRuns = workflowRuns.data.workflow_runs
                .filter(run => run.id !== currentRunId)
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .slice(1); // Keep only 1 most recent run
              
              console.log(`Found ${completedRuns.length} old workflow runs to delete`);
              
              for (const run of completedRuns) {
                try {
                  console.log(`Deleting workflow run: ${run.id} from ${run.created_at}`);
                  await github.rest.actions.deleteWorkflowRun({
                    owner,
                    repo,
                    run_id: run.id,
                  });
                } catch (error) {
                  console.log(`Failed to delete workflow run ${run.id}: ${error.message}`);
                }
              }
            } catch (error) {
              console.log(`Error cleaning workflow runs: ${error.message}`);
            }

            // 2. Clean up old artifacts (keep only the last 1)
            try {
              const artifacts = await github.rest.actions.listArtifactsForRepo({
                owner,
                repo,
                per_page: 100
              });

              const sortedArtifacts = artifacts.data.artifacts
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .slice(1); // Keep only 1 most recent artifact

              console.log(`Found ${sortedArtifacts.length} old artifacts to delete`);

              for (const artifact of sortedArtifacts) {
                try {
                  console.log(`Deleting artifact: ${artifact.name} (${artifact.id}) from ${artifact.created_at}`);
                  await github.rest.actions.deleteArtifact({
                    owner,
                    repo,
                    artifact_id: artifact.id,
                  });
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.id}: ${error.message}`);
                }
              }
            } catch (error) {
              console.log(`Error cleaning artifacts: ${error.message}`);
            }

            // 3. Clean up old deployments (optional - keep last 10)
            try {
              const deployments = await github.rest.repos.listDeployments({
                owner,
                repo,
                per_page: 100
              });
              
              const oldDeployments = deployments.data
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .slice(1); // Keep 10 most recent deployments
              
              console.log(`Found ${oldDeployments.length} old deployments to clean up`);
              
              for (const deployment of oldDeployments) {
                try {
                  // Set deployment to inactive first
                  await github.rest.repos.createDeploymentStatus({
                    owner,
                    repo,
                    deployment_id: deployment.id,
                    state: 'inactive'
                  });
                  console.log(`Marked deployment ${deployment.id} as inactive`);
                } catch (error) {
                  console.log(`Failed to deactivate deployment ${deployment.id}: ${error.message}`);
                }
              }
            } catch (error) {
              console.log(`Error cleaning deployments: ${error.message}`);
            }

            console.log('Cleanup completed!');
